version: '3'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8080

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    depends_on:
      - kafka-broker
    ports:
      - 8084:8080
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-broker:9092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8080
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: "full"

  kafka-connect:
    build: ./services/kafka-connect
    depends_on:
      - kafka-broker
      - schema-registry
    ports:
      - 8082:8080
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-broker:9092"
      CONNECT_REST_PORT: "8080"
      CONNECT_LISTENERS: "http://0.0.0.0:8080"
      CONNECT_GROUP_ID: "tfm"
      CONNECT_CONFIG_STORAGE_TOPIC: "tfm-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "tfm-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "tfm-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8080"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEYS_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      AWS_ACCESS_KEY_ID: "minio_access_key"
      AWS_SECRET_KEY: "minio_secret_key"
      AWS_DEFAULT_REGION: "eu-west-1"
      AWS_REGION: "eu-west-1"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka-broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-test
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "PLAINTEXT://kafka-broker:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8080
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: kafka-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8080

  clickhouse-server:
    image: yandex/clickhouse-server
    ports:
      - 8123:8123
    volumes:
      - ./db:/var/lib/clickhouse

  clickhouse-client:
    image: yandex/clickhouse-client
    entrypoint:
      - /bin/sleep
    command:
      - infinity

  materialized:
    image: materialize/materialized:v0.26.5
    command: -w1
    ports:
      - 6875:6875
  
  metabase:
    build: ./services/metabase
    depends_on:
      - clickhouse-server
    ports:
      - 3000:3000

  minio:
    image: minio/minio:latest
    ports:
      - 9001:9001
      - 9000:9000
    command: [ "server", "/data", "--console-address", ":9001" ]
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
      MINIO_ACCESS_KEY: minio_access_key
      MINIO_SECRET_KEY: minio_secret_key

  trino:
    image: trinodb/trino:370
    ports:
      - 8085:8080
    volumes:
      - ./services/trino/etc:/etc/trino

  hive-metastore:
    image: bitsondatadev/hive-metastore:latest
    volumes:
      - ./services/metastore/conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    depends_on:
      - mariadb

  mariadb:
    image: mariadb:10.8.2
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db

  api:
    build: ./api
    ports:
      - 9999:9999
    environment:
      DATABASE_URL: "postgresql://materialize:@materialized:6875/materialize"
    depends_on:
      - materialized

  streamlit:
    build: ./streamlit
    ports:
      - 8501:8501
    depends_on:
      - api

volumes:
  minio-data:
    driver: local
